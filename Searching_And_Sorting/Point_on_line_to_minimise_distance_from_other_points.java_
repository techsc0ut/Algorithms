import java.io.*;
import java.util.*;

class GFG {
    static int N=5;
    static int EPS=(int)(1e-6)+1;
    static double sq(double x){return ((x)*(x));}
	public static void main (String[] args) {
		Line l = new Line(1, -1, -3);
        int points[][] = { { -3, -2 },
                           { -1, 0 },
                           { -1, 2 },
                           { 1, 2 },
                           { 3, 4 } };
        System.out.println(Func(points, l));
	}
	static double BestPoint(Point[] Pts,Line l){
	    double low=-1e6;
	    double high=1e6;
	    while((high-low)>EPS){
	        double mid1=low+(high-low)/3;
	        double mid2=high-(high-low)/3;
	        double dist1=compute(Pts,N,l,mid1);
	        double dist2=compute(Pts,N,l,mid2);
	        if(dist1>=dist2){
	            low=mid1;
	        }else{
	            high=mid2;
	        }
	    }
	    return compute(Pts,N,l,(low+high)/2);
	}
	static double dist(double x,double y,Point P){
	    return Math.sqrt(sq(x-P.x)+sq(y-P.y));
	}
	static double Func(int[][] Pts,Line l){
	    Point[] P=new Point[Pts.length];
	    for(int i=0;i<N;i++){
	        P[i]=new Point(Pts[i][0],Pts[i][1]);
	    }
	    return BestPoint(P,l);
	}
	static double compute(Point[] Pts,int n,Line l,double X){
	    double res=0;
	    double Y=-1*((l.a*X+l.c)/l.b);
	    for(int i=0;i<n;i++){
	        res+=dist(X,Y,Pts[i]);    
	    }
	    return res;
	}  
}
class Line{
    int a;
    int b;
    int c;
    Line(){
    }
    Line(int aa,int bb,int cc){
        this.a=aa;
        this.b=bb;
        this.c=cc;
    }    
}
class Point{
    int x;
    int y;
    Point(){
    }
    Point(int xx,int yy){
        this.x=xx;
        this.y=yy;
    }
}




